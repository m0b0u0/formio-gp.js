[
  {
    "name": "Webform#setSubmissionValue",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 730,
        "line": "  /**\r"
      },
      {
        "lineNumber": 731,
        "line": "   * Explicitely sets the submission value directly without waiting on any form loads etc.\r"
      },
      {
        "lineNumber": 732,
        "line": "   *\r"
      },
      {
        "lineNumber": 733,
        "line": "   * @param submission\r"
      },
      {
        "lineNumber": 734,
        "line": "   * @return {*}\r"
      },
      {
        "lineNumber": 735,
        "line": "   */\r"
      },
      {
        "lineNumber": 736,
        "line": "  setSubmissionValue(submission, flags) {\r"
      }
    ],
    "codeParams": [
      "submission",
      "flags"
    ],
    "docParams": [
      "submission"
    ]
  },
  {
    "name": "Webform#restoreDraft",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 807,
        "line": "  /**\r"
      },
      {
        "lineNumber": 808,
        "line": "   * Restores a draft submission based on the user who is authenticated.\r"
      },
      {
        "lineNumber": 809,
        "line": "   *\r"
      },
      {
        "lineNumber": 810,
        "line": "   * @param {userId} - The user id where we need to restore the draft from.\r"
      },
      {
        "lineNumber": 811,
        "line": "   */\r"
      },
      {
        "lineNumber": 812,
        "line": "  restoreDraft(userId) {\r"
      }
    ],
    "codeParams": [
      "userId"
    ],
    "docParams": [
      "-"
    ]
  },
  {
    "name": "Webform#showErrors",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 995,
        "line": "  /**\r"
      },
      {
        "lineNumber": 996,
        "line": "   * Show the errors of this form within the alert dialog.\r"
      },
      {
        "lineNumber": 997,
        "line": "   *\r"
      },
      {
        "lineNumber": 998,
        "line": "   * @param {Object} error - An optional additional error to display along with the component errors.\r"
      },
      {
        "lineNumber": 999,
        "line": "   * @returns {*}\r"
      },
      {
        "lineNumber": 1000,
        "line": "   */\r"
      },
      {
        "lineNumber": 1001,
        "line": "  showErrors(error, triggerEvent) {\r"
      }
    ],
    "codeParams": [
      "error",
      "triggerEvent"
    ],
    "docParams": [
      "error"
    ]
  },
  {
    "name": "Webform#onChange",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1101,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1102,
        "line": "   * Trigger the change event for this form.\r"
      },
      {
        "lineNumber": 1103,
        "line": "   *\r"
      },
      {
        "lineNumber": 1104,
        "line": "   * @param changed\r"
      },
      {
        "lineNumber": 1105,
        "line": "   * @param flags\r"
      },
      {
        "lineNumber": 1106,
        "line": "   */\r"
      },
      {
        "lineNumber": 1107,
        "line": "  onChange(flags = {}, changed) {\r"
      }
    ],
    "codeParams": [
      "flags",
      "changed"
    ],
    "docParams": [
      "changed",
      "flags"
    ]
  },
  {
    "name": "Webform#submit",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1274,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1275,
        "line": "   * Submits the form.\r"
      },
      {
        "lineNumber": 1276,
        "line": "   *\r"
      },
      {
        "lineNumber": 1277,
        "line": "   * @example\r"
      },
      {
        "lineNumber": 1278,
        "line": "   * import Webform from 'formiojs/Webform';\r"
      },
      {
        "lineNumber": 1279,
        "line": "   * let form = new Webform(document.getElementById('formio'));\r"
      },
      {
        "lineNumber": 1280,
        "line": "   * form.src = 'https://examples.form.io/example';\r"
      },
      {
        "lineNumber": 1281,
        "line": "   * form.submission = {data: {\r"
      },
      {
        "lineNumber": 1282,
        "line": "   *   firstName: 'Joe',\r"
      },
      {
        "lineNumber": 1283,
        "line": "   *   lastName: 'Smith',\r"
      },
      {
        "lineNumber": 1284,
        "line": "   *   email: 'joe@example.com'\r"
      },
      {
        "lineNumber": 1285,
        "line": "   * }};\r"
      },
      {
        "lineNumber": 1286,
        "line": "   * form.submit().then((submission) => {\r"
      },
      {
        "lineNumber": 1287,
        "line": "   *   console.log(submission);\r"
      },
      {
        "lineNumber": 1288,
        "line": "   * });\r"
      },
      {
        "lineNumber": 1289,
        "line": "   *\r"
      },
      {
        "lineNumber": 1290,
        "line": "   * @param {boolean} before - If this submission occured from the before handlers.\r"
      },
      {
        "lineNumber": 1291,
        "line": "   *\r"
      },
      {
        "lineNumber": 1292,
        "line": "   * @returns {Promise} - A promise when the form is done submitting.\r"
      },
      {
        "lineNumber": 1293,
        "line": "   */\r"
      },
      {
        "lineNumber": 1294,
        "line": "  submit(before, options) {\r"
      }
    ],
    "codeParams": [
      "before",
      "options"
    ],
    "docParams": [
      "before"
    ]
  },
  {
    "name": "BaseComponent#createTooltip",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1275,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1276,
        "line": "   * Create the HTML element for the tooltip of this component.\r"
      },
      {
        "lineNumber": 1277,
        "line": "   * @param {HTMLElement} container - The containing element that will contain this tooltip.\r"
      },
      {
        "lineNumber": 1278,
        "line": "   */\r"
      },
      {
        "lineNumber": 1279,
        "line": "  createTooltip(container, component, classes) {\r"
      }
    ],
    "codeParams": [
      "container",
      "component",
      "classes"
    ],
    "docParams": [
      "container"
    ]
  },
  {
    "name": "BaseComponent#show",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1726,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1727,
        "line": "   * Hide or Show an element.\r"
      },
      {
        "lineNumber": 1728,
        "line": "   *\r"
      },
      {
        "lineNumber": 1729,
        "line": "   * @param show\r"
      },
      {
        "lineNumber": 1730,
        "line": "   */\r"
      },
      {
        "lineNumber": 1731,
        "line": "  show(show, noClear) {\r"
      }
    ],
    "codeParams": [
      "show",
      "noClear"
    ],
    "docParams": [
      "show"
    ]
  },
  {
    "name": "BaseComponent#addInput",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1891,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1892,
        "line": "   * Add a new input to this comonent.\r"
      },
      {
        "lineNumber": 1893,
        "line": "   *\r"
      },
      {
        "lineNumber": 1894,
        "line": "   * @param input\r"
      },
      {
        "lineNumber": 1895,
        "line": "   * @param container\r"
      },
      {
        "lineNumber": 1896,
        "line": "   * @param noSet\r"
      },
      {
        "lineNumber": 1897,
        "line": "   */\r"
      },
      {
        "lineNumber": 1898,
        "line": "  addInput(input, container) {\r"
      }
    ],
    "codeParams": [
      "input",
      "container"
    ],
    "docParams": [
      "input",
      "container",
      "noSet"
    ]
  },
  {
    "name": "BaseComponent#updateValue",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2195,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2196,
        "line": "   * Update a value of this component.\r"
      },
      {
        "lineNumber": 2197,
        "line": "   *\r"
      },
      {
        "lineNumber": 2198,
        "line": "   * @param flags\r"
      },
      {
        "lineNumber": 2199,
        "line": "   */\r"
      },
      {
        "lineNumber": 2200,
        "line": "  updateValue(flags, value) {\r"
      }
    ],
    "codeParams": [
      "flags",
      "value"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "BaseComponent#calculateValue",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2246,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2247,
        "line": "   * Perform a calculated value operation.\r"
      },
      {
        "lineNumber": 2248,
        "line": "   *\r"
      },
      {
        "lineNumber": 2249,
        "line": "   * @param data - The global data object.\r"
      },
      {
        "lineNumber": 2250,
        "line": "   *\r"
      },
      {
        "lineNumber": 2251,
        "line": "   * @return {boolean} - If the value changed during calculation.\r"
      },
      {
        "lineNumber": 2252,
        "line": "   */\r"
      },
      {
        "lineNumber": 2253,
        "line": "  calculateValue(data, flags) {\r"
      }
    ],
    "codeParams": [
      "data",
      "flags"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "BaseComponent#invalidMessage",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2337,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2338,
        "line": "   * Returns the invalid message, or empty string if the component is valid.\r"
      },
      {
        "lineNumber": 2339,
        "line": "   *\r"
      },
      {
        "lineNumber": 2340,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 2341,
        "line": "   * @param dirty\r"
      },
      {
        "lineNumber": 2342,
        "line": "   * @return {*}\r"
      },
      {
        "lineNumber": 2343,
        "line": "   */\r"
      },
      {
        "lineNumber": 2344,
        "line": "  invalidMessage(data, dirty, ignoreCondition) {\r"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "ignoreCondition"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "BaseComponent#setValueAt",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2459,
        "line": "  /**\r"
      },
      {
        "lineNumber": 2460,
        "line": "   * Set the value at a specific index.\r"
      },
      {
        "lineNumber": 2461,
        "line": "   *\r"
      },
      {
        "lineNumber": 2462,
        "line": "   * @param index\r"
      },
      {
        "lineNumber": 2463,
        "line": "   * @param value\r"
      },
      {
        "lineNumber": 2464,
        "line": "   */\r"
      },
      {
        "lineNumber": 2465,
        "line": "  setValueAt(index, value, flags) {\r"
      }
    ],
    "codeParams": [
      "index",
      "value",
      "flags"
    ],
    "docParams": [
      "index",
      "value"
    ]
  },
  {
    "name": "NestedComponent#getComponent",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 122,
        "line": "  /**\r"
      },
      {
        "lineNumber": 123,
        "line": "   * Returns a component provided a key. This performs a deep search within the\r"
      },
      {
        "lineNumber": 124,
        "line": "   * component tree.\r"
      },
      {
        "lineNumber": 125,
        "line": "   *\r"
      },
      {
        "lineNumber": 126,
        "line": "   * @param {string} key - The key of the component to retrieve.\r"
      },
      {
        "lineNumber": 127,
        "line": "   * @param {function} fn - Called with the component once found.\r"
      },
      {
        "lineNumber": 128,
        "line": "   * @return {Object} - The component that is located.\r"
      },
      {
        "lineNumber": 129,
        "line": "   */\r"
      },
      {
        "lineNumber": 130,
        "line": "  getComponent(path, fn) {\r"
      }
    ],
    "codeParams": [
      "path",
      "fn"
    ],
    "docParams": [
      "key",
      "fn"
    ]
  },
  {
    "name": "NestedComponent#createComponent",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 176,
        "line": "  /**\r"
      },
      {
        "lineNumber": 177,
        "line": "   * Create a new component and add it to the components array.\r"
      },
      {
        "lineNumber": 178,
        "line": "   *\r"
      },
      {
        "lineNumber": 179,
        "line": "   * @param component\r"
      },
      {
        "lineNumber": 180,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 181,
        "line": "   */\r"
      },
      {
        "lineNumber": 182,
        "line": "  createComponent(component, options, data, before, state) {\r"
      }
    ],
    "codeParams": [
      "component",
      "options",
      "data",
      "before",
      "state"
    ],
    "docParams": [
      "component",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponents",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 318,
        "line": "  /**\r"
      },
      {
        "lineNumber": 319,
        "line": "   *\r"
      },
      {
        "lineNumber": 320,
        "line": "   * @param element\r"
      },
      {
        "lineNumber": 321,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 322,
        "line": "   */\r"
      },
      {
        "lineNumber": 323,
        "line": "  addComponents(element, data, options, state) {\r"
      }
    ],
    "codeParams": [
      "element",
      "data",
      "options",
      "state"
    ],
    "docParams": [
      "element",
      "data"
    ]
  },
  {
    "name": "NestedComponent#checkData",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 371,
        "line": "  /**\r"
      },
      {
        "lineNumber": 372,
        "line": "   * A more performant way to check the conditions, calculations, and validity of\r"
      },
      {
        "lineNumber": 373,
        "line": "   * a submission once it has been changed.\r"
      },
      {
        "lineNumber": 374,
        "line": "   *\r"
      },
      {
        "lineNumber": 375,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 376,
        "line": "   * @param flags\r"
      },
      {
        "lineNumber": 377,
        "line": "   */\r"
      },
      {
        "lineNumber": 378,
        "line": "  checkData(data, flags, source) {\r"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "source"
    ],
    "docParams": [
      "data",
      "flags"
    ]
  },
  {
    "name": "NestedComponent#destroy",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 504,
        "line": "  /**\r"
      },
      {
        "lineNumber": 505,
        "line": "   * Destroys this component.\r"
      },
      {
        "lineNumber": 506,
        "line": "   *\r"
      },
      {
        "lineNumber": 507,
        "line": "   * @param state\r"
      },
      {
        "lineNumber": 508,
        "line": "   */\r"
      },
      {
        "lineNumber": 509,
        "line": "  destroy() {\r"
      }
    ],
    "codeParams": [],
    "docParams": [
      "state"
    ]
  },
  {
    "name": "SelectComponent#addOption",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 166,
        "line": "  /**\r"
      },
      {
        "lineNumber": 167,
        "line": "   * Adds an option to the select dropdown.\r"
      },
      {
        "lineNumber": 168,
        "line": "   *\r"
      },
      {
        "lineNumber": 169,
        "line": "   * @param value\r"
      },
      {
        "lineNumber": 170,
        "line": "   * @param label\r"
      },
      {
        "lineNumber": 171,
        "line": "   */\r"
      },
      {
        "lineNumber": 172,
        "line": "  addOption(value, label, attr) {\r"
      }
    ],
    "codeParams": [
      "value",
      "label",
      "attr"
    ],
    "docParams": [
      "value",
      "label"
    ]
  },
  {
    "name": "SelectComponent#addCurrentChoices",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 784,
        "line": "  /**\r"
      },
      {
        "lineNumber": 785,
        "line": "   * @param {*} value\r"
      },
      {
        "lineNumber": 786,
        "line": "   * @param {Array} items\r"
      },
      {
        "lineNumber": 787,
        "line": "   */\r"
      },
      {
        "lineNumber": 788,
        "line": "  addCurrentChoices(values, items, keyValue) {\r"
      }
    ],
    "codeParams": [
      "values",
      "items",
      "keyValue"
    ],
    "docParams": [
      "value",
      "items"
    ]
  },
  {
    "name": "TableComponent#addComponents",
    "filePath": "src/components/table/Table.js",
    "lines": [
      {
        "lineNumber": 71,
        "line": "  /**\r"
      },
      {
        "lineNumber": 72,
        "line": "   *\r"
      },
      {
        "lineNumber": 73,
        "line": "   * @param element\r"
      },
      {
        "lineNumber": 74,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 75,
        "line": "   */\r"
      },
      {
        "lineNumber": 76,
        "line": "  addComponents(element, data, options, state) {\r"
      }
    ],
    "codeParams": [
      "element",
      "data",
      "options",
      "state"
    ],
    "docParams": [
      "element",
      "data"
    ]
  },
  {
    "name": "TabsComponent#setTab",
    "filePath": "src/components/tabs/Tabs.js",
    "lines": [
      {
        "lineNumber": 146,
        "line": "  /**\r"
      },
      {
        "lineNumber": 147,
        "line": "   * Set the current tab.\r"
      },
      {
        "lineNumber": 148,
        "line": "   *\r"
      },
      {
        "lineNumber": 149,
        "line": "   * @param index\r"
      },
      {
        "lineNumber": 150,
        "line": "   */\r"
      },
      {
        "lineNumber": 151,
        "line": "  setTab(index, state) {\r"
      }
    ],
    "codeParams": [
      "index",
      "state"
    ],
    "docParams": [
      "index"
    ]
  },
  {
    "name": "TabsComponent#addComponent",
    "filePath": "src/components/tabs/Tabs.js",
    "lines": [
      {
        "lineNumber": 248,
        "line": "  /**\r"
      },
      {
        "lineNumber": 249,
        "line": "   * Make sure to include the tab on the component as it is added.\r"
      },
      {
        "lineNumber": 250,
        "line": "   *\r"
      },
      {
        "lineNumber": 251,
        "line": "   * @param component\r"
      },
      {
        "lineNumber": 252,
        "line": "   * @param element\r"
      },
      {
        "lineNumber": 253,
        "line": "   * @param data\r"
      },
      {
        "lineNumber": 254,
        "line": "   * @param before\r"
      },
      {
        "lineNumber": 255,
        "line": "   * @return {BaseComponent}\r"
      },
      {
        "lineNumber": 256,
        "line": "   */\r"
      },
      {
        "lineNumber": 257,
        "line": "  addComponent(component, element, data, before, noAdd, state) {\r"
      }
    ],
    "codeParams": [
      "component",
      "element",
      "data",
      "before",
      "noAdd",
      "state"
    ],
    "docParams": [
      "component",
      "element",
      "data",
      "before"
    ]
  },
  {
    "name": "getComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 138,
        "line": "/**\r"
      },
      {
        "lineNumber": 139,
        "line": " * Get a component by its key\r"
      },
      {
        "lineNumber": 140,
        "line": " *\r"
      },
      {
        "lineNumber": 141,
        "line": " * @param {Object} components\r"
      },
      {
        "lineNumber": 142,
        "line": " *   The components to iterate.\r"
      },
      {
        "lineNumber": 143,
        "line": " * @param {String|Object} key\r"
      },
      {
        "lineNumber": 144,
        "line": " *   The key of the component to get, or a query of the component to search.\r"
      },
      {
        "lineNumber": 145,
        "line": " *\r"
      },
      {
        "lineNumber": 146,
        "line": " * @returns {Object}\r"
      },
      {
        "lineNumber": 147,
        "line": " *   The component that matches the given key, or undefined if not found.\r"
      },
      {
        "lineNumber": 148,
        "line": " */\r"
      },
      {
        "lineNumber": 149,
        "line": "export function getComponent(components, key, includeAll) {\r"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "includeAll"
    ],
    "docParams": [
      "components",
      "key"
    ]
  },
  {
    "name": "findComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 222,
        "line": "/**\r"
      },
      {
        "lineNumber": 223,
        "line": " * This function will find a component in a form and return the component AND THE PATH to the component in the form.\r"
      },
      {
        "lineNumber": 224,
        "line": " *\r"
      },
      {
        "lineNumber": 225,
        "line": " * @param components\r"
      },
      {
        "lineNumber": 226,
        "line": " * @param key\r"
      },
      {
        "lineNumber": 227,
        "line": " * @param fn\r"
      },
      {
        "lineNumber": 228,
        "line": " * @param path\r"
      },
      {
        "lineNumber": 229,
        "line": " * @returns boolean - If the component was found.\r"
      },
      {
        "lineNumber": 230,
        "line": " */\r"
      },
      {
        "lineNumber": 231,
        "line": "export function findComponent(components, key, path, fn) {\r"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "path",
      "fn"
    ],
    "docParams": [
      "components",
      "key",
      "fn",
      "path"
    ]
  },
  {
    "name": "evaluate",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 44,
        "line": "/* eslint-disable max-statements */\r"
      },
      {
        "lineNumber": 45,
        "line": "export function evaluate(func, args, ret, tokenize) {\r"
      }
    ],
    "codeParams": [
      "func",
      "args",
      "ret",
      "tokenize"
    ],
    "docParams": [
      "func",
      "args"
    ]
  },
  {
    "name": "checkCalculated",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 177,
        "line": "/**\r"
      },
      {
        "lineNumber": 178,
        "line": " * Checks the calculated value for a provided component and data.\r"
      },
      {
        "lineNumber": 179,
        "line": " *\r"
      },
      {
        "lineNumber": 180,
        "line": " * @param {Object} component\r"
      },
      {
        "lineNumber": 181,
        "line": " *   The component to check for the calculated value.\r"
      },
      {
        "lineNumber": 182,
        "line": " * @param {Object} submission\r"
      },
      {
        "lineNumber": 183,
        "line": " *   A submission object.\r"
      },
      {
        "lineNumber": 184,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 185,
        "line": " *   The full submission data.\r"
      },
      {
        "lineNumber": 186,
        "line": " */\r"
      },
      {
        "lineNumber": 187,
        "line": "export function checkCalculated(component, submission, rowData) {\r"
      }
    ],
    "codeParams": [
      "component",
      "submission",
      "rowData"
    ],
    "docParams": [
      "component",
      "submission",
      "data"
    ]
  },
  {
    "name": "checkSimpleConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 200,
        "line": "/**\r"
      },
      {
        "lineNumber": 201,
        "line": " * Check if a simple conditional evaluates to true.\r"
      },
      {
        "lineNumber": 202,
        "line": " *\r"
      },
      {
        "lineNumber": 203,
        "line": " * @param condition\r"
      },
      {
        "lineNumber": 204,
        "line": " * @param condition\r"
      },
      {
        "lineNumber": 205,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 206,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 207,
        "line": " * @returns {boolean}\r"
      },
      {
        "lineNumber": 208,
        "line": " */\r"
      },
      {
        "lineNumber": 209,
        "line": "export function checkSimpleConditional(component, condition, row, data) {\r"
      }
    ],
    "codeParams": [
      "component",
      "condition",
      "row",
      "data"
    ],
    "docParams": [
      "condition",
      "condition",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCustomConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 237,
        "line": "/**\r"
      },
      {
        "lineNumber": 238,
        "line": " * Check custom javascript conditional.\r"
      },
      {
        "lineNumber": 239,
        "line": " *\r"
      },
      {
        "lineNumber": 240,
        "line": " * @param component\r"
      },
      {
        "lineNumber": 241,
        "line": " * @param custom\r"
      },
      {
        "lineNumber": 242,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 243,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 244,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 245,
        "line": " */\r"
      },
      {
        "lineNumber": 246,
        "line": "export function checkCustomConditional(component, custom, row, data, form, variable, onError, instance) {\r"
      }
    ],
    "codeParams": [
      "component",
      "custom",
      "row",
      "data",
      "form",
      "variable",
      "onError",
      "instance"
    ],
    "docParams": [
      "component",
      "custom",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCondition",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 274,
        "line": "/**\r"
      },
      {
        "lineNumber": 275,
        "line": " * Checks the conditions for a provided component and data.\r"
      },
      {
        "lineNumber": 276,
        "line": " *\r"
      },
      {
        "lineNumber": 277,
        "line": " * @param component\r"
      },
      {
        "lineNumber": 278,
        "line": " *   The component to check for the condition.\r"
      },
      {
        "lineNumber": 279,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 280,
        "line": " *   The data within a row\r"
      },
      {
        "lineNumber": 281,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 282,
        "line": " *   The full submission data.\r"
      },
      {
        "lineNumber": 283,
        "line": " *\r"
      },
      {
        "lineNumber": 284,
        "line": " * @returns {boolean}\r"
      },
      {
        "lineNumber": 285,
        "line": " */\r"
      },
      {
        "lineNumber": 286,
        "line": "export function checkCondition(component, row, data, form, instance) {\r"
      }
    ],
    "codeParams": [
      "component",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "row",
      "data"
    ]
  },
  {
    "name": "checkTrigger",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 301,
        "line": "/**\r"
      },
      {
        "lineNumber": 302,
        "line": " * Test a trigger on a component.\r"
      },
      {
        "lineNumber": 303,
        "line": " *\r"
      },
      {
        "lineNumber": 304,
        "line": " * @param component\r"
      },
      {
        "lineNumber": 305,
        "line": " * @param action\r"
      },
      {
        "lineNumber": 306,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 307,
        "line": " * @param row\r"
      },
      {
        "lineNumber": 308,
        "line": " * @returns {mixed}\r"
      },
      {
        "lineNumber": 309,
        "line": " */\r"
      },
      {
        "lineNumber": 310,
        "line": "export function checkTrigger(component, trigger, row, data, form, instance) {\r"
      }
    ],
    "codeParams": [
      "component",
      "trigger",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "action",
      "data",
      "row"
    ]
  },
  {
    "name": "interpolate",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 373,
        "line": "/**\r"
      },
      {
        "lineNumber": 374,
        "line": " * Interpolate a string and add data replacements.\r"
      },
      {
        "lineNumber": 375,
        "line": " *\r"
      },
      {
        "lineNumber": 376,
        "line": " * @param string\r"
      },
      {
        "lineNumber": 377,
        "line": " * @param data\r"
      },
      {
        "lineNumber": 378,
        "line": " * @returns {XML|string|*|void}\r"
      },
      {
        "lineNumber": 379,
        "line": " */\r"
      },
      {
        "lineNumber": 380,
        "line": "export function interpolate(rawTemplate, data) {\r"
      }
    ],
    "codeParams": [
      "rawTemplate",
      "data"
    ],
    "docParams": [
      "string",
      "data"
    ]
  },
  {
    "name": "delay",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 895,
        "line": "/**\r"
      },
      {
        "lineNumber": 896,
        "line": " * Delays function execution with possibility to execute function synchronously or cancel it.\r"
      },
      {
        "lineNumber": 897,
        "line": " *\r"
      },
      {
        "lineNumber": 898,
        "line": " * @param fn Function to delay\r"
      },
      {
        "lineNumber": 899,
        "line": " * @param delay Delay time\r"
      },
      {
        "lineNumber": 900,
        "line": " * @return {*}\r"
      },
      {
        "lineNumber": 901,
        "line": " */\r"
      },
      {
        "lineNumber": 902,
        "line": "export function delay(fn, delay = 0, ...args) {\r"
      }
    ],
    "codeParams": [
      "fn",
      "delay",
      "args"
    ],
    "docParams": [
      "fn",
      "delay"
    ]
  },
  {
    "name": "unfold",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 969,
        "line": "/**\r"
      },
      {
        "lineNumber": 970,
        "line": " * Retrun provided argument.\r"
      },
      {
        "lineNumber": 971,
        "line": " * If argument is a function, returns the result of a function call.\r"
      },
      {
        "lineNumber": 972,
        "line": " * @param {*} e;\r"
      },
      {
        "lineNumber": 973,
        "line": " *\r"
      },
      {
        "lineNumber": 974,
        "line": " * @return {*}\r"
      },
      {
        "lineNumber": 975,
        "line": " */\r"
      },
      {
        "lineNumber": 976,
        "line": "export function unfold(e) {\r"
      }
    ],
    "codeParams": [
      "e"
    ],
    "docParams": [
      "e;"
    ]
  }
]